diff --git a/app.py b/app.py
index 6e7d253..1eb6848 100644
--- a/app.py
+++ b/app.py
@@ -6,6 +6,9 @@ from graphql_ws.gevent import  GeventSubscriptionServer
 from flask_cors import CORS
 import os
 from schema import schema
+from redisclient import syncredis
+from graphql.execution.executors.asyncio import AsyncioExecutor
+import asyncio
 
 class GraphQLCustomCoreBackend(GraphQLCoreBackend):
     def __init__(self, executor=None):
@@ -19,23 +22,35 @@ PORT = int(os.environ.get('SERVER_PORT'))
 app.debug = True
 app.add_url_rule('/graphql', view_func=GraphQLView.as_view('graphql', schema=schema, backend=GraphQLCustomCoreBackend(), graphiql=True))
 
-
 sockets = Sockets(app)
 subscription_server = GeventSubscriptionServer(schema)
 app.app_protocol = lambda environ_path_info: 'graphql-ws'
 
-
 @sockets.route('/subscriptions')
 def echo_socket(ws):
     subscription_server.handle(ws)
     return []
 
+@app.route('/increment/<id>')
+def increment(id):
+    print('doing asyncinc')
+    syncredis.publish('job:{id}'.format(id=id), 'Hello World {0}'.format(id))
+    return "OK"
+
+
+# 
+
+# # Create Redis client bound to connections pool.
+# async def pool_of_connections():
+#    
+#    
 
-if __name__ == "__main__":
-    from gevent import pywsgi
-    from geventwebsocket.handler import WebSocketHandler
-    print("Server running")
-    server = pywsgi.WSGIServer(('', PORT), app, handler_class=WebSocketHandler)
-    server.serve_forever()
+#    # we can also use pub/sub as underlying pool
+#    #  has several free connections:
+#    
+#    # publish using free connection
+#    
+#    
+#    print(a)
 
-    
\ No newline at end of file
+# asyncio.run(pool_of_connections())
\ No newline at end of file
