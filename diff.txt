diff --git a/schema.py b/schema.py
index 7183eb5..35f5489 100644
--- a/schema.py
+++ b/schema.py
@@ -1,16 +1,10 @@
 import graphene
 import os
 from rx import Observable
-import random
-
 
 class SampleQuery(graphene.ObjectType):
-    result = graphene.Int()
     server_name = graphene.String()
 
-    def resolve_result(self, info):
-        return random.randint(1,101)
-
     def resolve_server_name(self, info):
         return os.environ.get('SERVER_NAME', 'default')
 
@@ -22,24 +16,26 @@ class Query(graphene.ObjectType):
 
 
 class StatefulSecondsCounter(graphene.ObjectType):
-    time = graphene.Int()
     server_name = graphene.String()
-
-    def __init__(self, time):
-        self.time = time
-    
-    def resolve_time(self, info):
-        return self.time
+    time = graphene.Int()
 
     def resolve_server_name(self, info):
         return os.environ.get('SERVER_NAME', 'default')
 
 class Subscription(graphene.ObjectType):
-    count_seconds = graphene.Field(StatefulSecondsCounter, start_from=graphene.Int(), up_to=graphene.Int())
+    build_log = graphene.Int()
+
+    # def resolve_build_log(root, info, app_id, job_id):
+    #     return Observable.just(StatefulSecondsCounter())
 
-    def resolve_count_seconds(root, info, start_from=0, up_to=5):
+    def resolve_build_log(self, info):
         return Observable.interval(1000)\
-            .take_while(lambda i: int(i) + start_from <= up_to)\
-            .map(lambda i: StatefulSecondsCounter(i + start_from))
+                        .map(lambda i: int(i))\
+                        .take_while(lambda i: i < 100)
+        # yield 0
+        # for i in range(10):
+        #     yield i
+        #     await asyncio.sleep(1.)
+        # yield 10
 
 schema = graphene.Schema(query=Query,  subscription=Subscription)
\ No newline at end of file
